y2 <- rw2$x[(b + 1):N]
y3 <- rw3$x[(b + 1):N]
y4 <- rw4$x[(b + 1):N]
y1.2 <- rw1.2$x[(b + 1):N]
y2.2 <- rw2.2$x[(b + 1):N]
y3.2 <- rw3.2$x[(b + 1):N]
y4.2 <- rw4.2$x[(b + 1):N]
y1.3 <- rw1.3$x[(b + 1):N]
y2.3 <- rw2.3$x[(b + 1):N]
y3.3 <- rw3.3$x[(b + 1):N]
y4.3 <- rw4.3$x[(b + 1):N]
#sigama=0.5
xx1<-rbind(y1,y1.2,y1.3)
psi1<-t(apply(xx1,1,cumsum))
nr<-nrow(psi1)
for (i in 1:nr)
psi1[i,]<-psi1[i,]/(1:ncol(psi1))
print(rb(psi1))
#9.7
#clear memory
rm(list = ls())
set.seed(123)
#Set parameters
N <- 5000
burn <- 1000
X <- matrix(0, N, 2)
rho <- 0.9
mu1 <- 0
mu2 <- 0
sigma1 <- 1
sigma2 <- 1
s1 <- sqrt(1 - rho^2)* sigma1
s2 <- sqrt(1 - rho^2)* sigma2
#Implement a Gibbs sampler to generate a bivariate normal chain
#with zero means, unit standard deviations, and correlation 0.9
gibl<-function(X){
for (i in 2:N) {
x2<-X[i-1,2]
m1<-mu1+rho*(x2-mu2) * sigma1/sigma2
X[i, 1] <- rnorm(1, m1,s1)
x1 <- X[i, 1]
m2<-mu2+rho*(x1-mu1) * sigma2/sigma1
X[i, 2]<-rnorm(1, m2,s2)
}
return(X)
}
#define the Gelman-Rubin method function
rb<-function(psi){
psi<-as.matrix(psi)
n<-ncol(psi)
k<-nrow(psi)
psi.means<-rowMeans(psi)
B<-n*var(psi.means)
psi.w<-apply(psi,1,"var")
W<-mean(psi.w)
v.hat<-W*(n-1)/n+(B/(n*k))
r.hat<-v.hat/W
return(r.hat)
}
#use x0=(0,0) to output the result
X[1, ] <- c(1, 1)
X_re2<-gibl(X)
X[1, ] <- c(-1, -1)
X_re3<-gibl(X)
X[1, ] <- c(mu1, mu2)
X_re<-gibl(X)
#monitor convergence of the chain
xx1<-rbind(X_re2[(burn+1):N,1],X_re3[(burn+1):N,1],X_re[(burn+1):N,1])
psi1<-t(apply(xx1,1,cumsum))
nr<-nrow(psi1)
for (i in 1:nr)
psi1[i,]<-psi1[i,]/(1:ncol(psi1))
print(rb(psi1))
rm(list = ls())
set.seed(123)
# Function with equation
fun <- function(x) {
(-11*exp(-x*11)+12*exp(-x*12))/(exp(-x*11)+exp(-x*12))+
(-8*exp(-x*8)+9*exp(-x*9))/(exp(-x*8)+exp(-x*9))+
(-27*exp(-x*27)+28*exp(-x*28))/(exp(-x*27)+exp(-x*28))+
(-13*exp(-x*13)+14*exp(-x*14))/(exp(-x*13)+exp(-x*14))+
(-0*exp(-x*0)+1*exp(-x*1))/(exp(-x*0)+exp(-x*1))+
(-23*exp(-x*23)+24*exp(-x*24))/(exp(-x*23)+exp(-x*24))+
(-10*exp(-x*10)+11*exp(-x*11))/(exp(-x*10)+exp(-x*11))+
(-24*exp(-x*24)+25*exp(-x*25))/(exp(-x*24)+exp(-x*25))+
(-2*exp(-x*2)+3*exp(-x*3))/(exp(-x*2)+exp(-x*3))+
(-16*exp(-x*16)+17*exp(-x*17))/(exp(-x*16)+exp(-x*17))
}
# Calling uniroot() function
uniroot(fun,c(0,1))$root
#CLEAR MEMORY
rm(list = ls())
set.seed(123)
# Function with equation
fun <- function(x) {
(-11*exp(-x*11)+12*exp(-x*12))/(exp(-x*11)+exp(-x*12))+
(-8*exp(-x*8)+9*exp(-x*9))/(exp(-x*8)+exp(-x*9))+
(-27*exp(-x*27)+28*exp(-x*28))/(exp(-x*27)+exp(-x*28))+
(-13*exp(-x*13)+14*exp(-x*14))/(exp(-x*13)+exp(-x*14))+
(-0*exp(-x*0)+1*exp(-x*1))/(exp(-x*0)+exp(-x*1))+
(-23*exp(-x*23)+24*exp(-x*24))/(exp(-x*23)+exp(-x*24))+
(-10*exp(-x*10)+11*exp(-x*11))/(exp(-x*10)+exp(-x*11))+
(-24*exp(-x*24)+25*exp(-x*25))/(exp(-x*24)+exp(-x*25))+
(-2*exp(-x*2)+3*exp(-x*3))/(exp(-x*2)+exp(-x*3))+
(-16*exp(-x*16)+17*exp(-x*17))/(exp(-x*16)+exp(-x*17))
}
#em
emfun<-function(max.it,eps){
lambda0<-0.1
i<-1
theta1<-1
theta2<-0.1
xx<-fun(lambda0)
while(abs(theta1-theta2)>=eps){
theta1<-theta2
theta2<-10/(10/theta1-xx)
xx<-fun(theta2)
if (i == max.it) break
i<-i+1
}
return(theta2)
}
emfun(10000,1e-5)
rm(list = ls())
set.seed(123)
#Implement a Gibbs sampler to generate a bivariate normal chain
#with zero means, unit standard deviations, and correlation 0.9
gibl<-function(N){
rho=0.9
mu1=mu2=0
sigma1=sigma2=1
X <- matrix(0, N, 2)
X[1, ] <- c(0, 0)
s1 <- sqrt(1 - rho^2)* sigma1
s2 <- sqrt(1 - rho^2)* sigma2
for (i in 2:N) {
x2<-X[i-1,2]
m1<-mu1+rho*(x2-mu2) * sigma1/sigma2
X[i, 1] <- rnorm(1, m1,s1)
x1 <- X[i, 1]
m2<-mu2+rho*(x1-mu1) * sigma2/sigma1
X[i, 2]<-rnorm(1, m2,s2)
}
return(X)
}
library(Rcpp)
#// This is the giblC.cpp
#include <Rcpp.h>
#using namespace Rcpp;
#// [[Rcpp::export]]
cppFunction('NumericMatrix gibbsC(int N){
NumericMatrix mat(N,2);
double rho=0.9,mu1=0,mu2=0,sigma1=1,sigma2=1;
double s1 = sqrt(1 - pow(rho,2))* sigma1;
double s2 = sqrt(1 - pow(rho,2))* sigma2;
double x=mu1,y=mu2;
for (int i=0;i<N;i++){
double m1=mu1+rho*(y-mu2) * sigma1/sigma2;
x=rnorm(1, m1,s1)[0];
double m2=mu2+rho*(x-mu1) * sigma2/sigma1;
y=rnorm(1, m2,s2)[0];
mat(i,0)=x;
mat(i,1)=y;
}
return(mat);
}')
devtools::document()
rlang::last_error()
rlang::last_trace()
devtools::document()
devtools::check()
quick_sort<-function(x){
num<-length(x)
if(num==0||num==1){return(x)
}else{
a<-x[1]
y<-x[-1]
lower<-y[y<a]
upper<-y[y>=a]
return(c(quick_sort(lower),a,quick_sort(upper)))}
}
k<-replicate(100, {
test<-sample(1:1e4)
system.time(quick_sort(test))[1]
})
k=mean(k)
kk<-replicate(100, {
test<-sample(1:2e4)
system.time(quick_sort(test))[1]
})
kk=mean(kk)
kkk<-replicate(100, {
test<-sample(1:4e4)
system.time(quick_sort(test))[1]
})
kkk=mean(kkk)
kkkk<-replicate(100, {
test<-sample(1:6e4)
system.time(quick_sort(test))[1]
})
kkkk=mean(kkkk)
kkkkk<-replicate(100, {
test<-sample(1:8e4)
system.time(quick_sort(test))[1]
})
kkkkk=mean(kkkkk)
yy<-c(k,kk,kkk,kkkk,kkkkk)
xx<-c(1e4*log(1e4),2e4*log(2e4),3e4*log(3e4),4e4*log(4e4),5e4*log(5e4))
f1 <- function(m,n){
set.seed(123)
y <- matrix(0,m,n)
for (i in 1:m){
x <- rlnorm(n)
y[i,1:n] <- log(x)
}
y
}
f2 <- function(Sam){
m <- nrow(Sam)
n <- ncol(Sam)
CI <- matrix(0,m,2)
for (i in 1:m){
y <- Sam[i,1:n]
ybar <- mean(y)
se <- sd(y)/sqrt(n)
CI[i,1] <- ybar + se * qnorm(c(0.025))
CI[i,2] <- ybar + se * qnorm(c(0.975))
}
CI
}
f3 <- function(confidenceint){
m <- nrow(confidenceint)
LOW <- confidenceint[1:m,1]
UP <- confidenceint[1:m,2]
res <- mean(LOW < 0 & UP > 0)
res
}
f4<- function(sigma1,sigma2,m,n){
set.seed(12)
Samp1 <- matrix(0,m,n)
Samp2 <- matrix(0,m,n)
for (i in 1:m){
x <- rnorm(n, 0, sigma1)
y <- rnorm(n, 0, sigma2)
Samp1[i,1:n] <- x
Samp2[i,1:n] <- y
}
SAmp <- rbind(Samp1,Samp2)
SAmp
}
couu <- function(x, y) {
X <- x - mean(x)
Y <- y - mean(y)
outx <- sum(X > max(Y)) + sum(X < min(Y))
outy <- sum(Y > max(X)) + sum(Y < min(X))
cou5te <- as.integer(max(c(outx, outy)) > 5)
cou5te
}
f5 <- function(Samp) {
m <- nrow(Samp)/2
n <- ncol(Samp)
Test <- matrix(0,2,m)
for (i in 1:m){
x <- Samp[i,1:n]
y <- Samp[m+i,1:n]
C5 <- couu(x, y)
Fp <- var.test(x, y)$p.value
Ftest <- as.integer(Fp <= 0.055)
Test[1:2,i] <- c(C5, Ftest)
}
Test
}
f6 <- function(Test) {
RE <- c(n,rowMeans(Test))
RE
}
comlam <- function(c1){
eigen(cov(c1))$values
}
comtheha<- function(c2){
max(c2/sum(c2))
}
comjack<-function(c3){
thejack <- numeric(n)
for  (i in 1:n) {
y <- c3[-i, ]
s <- cov(y)
lamda <- eigen(s)$values
thejack[i] <- comtheha(lamda)
}
thejack
}
comeee<-function(can1,can2){
sum((can1 - can2)^2)
}
f7<-function(a,b){
lm(a~b)
}
f8<-function(a,b){
lm(a~b+I(b^2))
}
f9<-function(a,b){
lm(log(a) ~ b)
}
f10<-function(a,b){
lm(log(a) ~ log(b))
}
f11<-function(a,b){
c1<-b^2
c2<-b^3
J5<-lm(a~b+c1+c2)
}
#define a random walk Metropolis sampler function
#generating the standard Laplace distribution
scl <- function(N, x0, sigma) {
x <- numeric(N)
x[1] <- x0
u <- runif(N)
k<-0
for (i in 2:N) {
xt <- x[i - 1]
y <- rnorm(1, xt, sigma)
if (u[i] <= exp(abs(xt) - abs(y)))
x[i] <- y
else {
x[i] <- x[i - 1]
k <- k + 1
}
}
return(list(x = x, k = k))
}
#define the Gelman-Rubin method function
rb<-function(psi){
psi<-as.matrix(psi)
n<-ncol(psi)
k<-nrow(psi)
psi.means<-rowMeans(psi)
B<-n*var(psi.means)
psi.w<-apply(psi,1,"var")
W<-mean(psi.w)
v.hat<-W*(n-1)/n+(B/(n*k))
r.hat<-v.hat/W
return(r.hat)
}
#Implement a Gibbs sampler to generate a bivariate normal chain
#with zero means, unit standard deviations, and correlation 0.9
gibl<-function(X){
for (i in 2:N) {
x2<-X[i-1,2]
m1<-mu1+rho*(x2-mu2) * sigma1/sigma2
X[i, 1] <- rnorm(1, m1,s1)
x1 <- X[i, 1]
m2<-mu2+rho*(x1-mu1) * sigma2/sigma1
X[i, 2]<-rnorm(1, m2,s2)
}
return(X)
}
#define the Gelman-Rubin method function
rb<-function(psi){
psi<-as.matrix(psi)
n<-ncol(psi)
k<-nrow(psi)
psi.means<-rowMeans(psi)
B<-n*var(psi.means)
psi.w<-apply(psi,1,"var")
W<-mean(psi.w)
v.hat<-W*(n-1)/n+(B/(n*k))
r.hat<-v.hat/W
return(r.hat)
}
# Function with equation
fun12 <- function(x) {
(-11*exp(-x*11)+12*exp(-x*12))/(exp(-x*11)+exp(-x*12))+
(-8*exp(-x*8)+9*exp(-x*9))/(exp(-x*8)+exp(-x*9))+
(-27*exp(-x*27)+28*exp(-x*28))/(exp(-x*27)+exp(-x*28))+
(-13*exp(-x*13)+14*exp(-x*14))/(exp(-x*13)+exp(-x*14))+
(-0*exp(-x*0)+1*exp(-x*1))/(exp(-x*0)+exp(-x*1))+
(-23*exp(-x*23)+24*exp(-x*24))/(exp(-x*23)+exp(-x*24))+
(-10*exp(-x*10)+11*exp(-x*11))/(exp(-x*10)+exp(-x*11))+
(-24*exp(-x*24)+25*exp(-x*25))/(exp(-x*24)+exp(-x*25))+
(-2*exp(-x*2)+3*exp(-x*3))/(exp(-x*2)+exp(-x*3))+
(-16*exp(-x*16)+17*exp(-x*17))/(exp(-x*16)+exp(-x*17))
}
# Function with equation
fun13 <- function(x) {
(-11*exp(-x*11)+12*exp(-x*12))/(exp(-x*11)+exp(-x*12))+
(-8*exp(-x*8)+9*exp(-x*9))/(exp(-x*8)+exp(-x*9))+
(-27*exp(-x*27)+28*exp(-x*28))/(exp(-x*27)+exp(-x*28))+
(-13*exp(-x*13)+14*exp(-x*14))/(exp(-x*13)+exp(-x*14))+
(-0*exp(-x*0)+1*exp(-x*1))/(exp(-x*0)+exp(-x*1))+
(-23*exp(-x*23)+24*exp(-x*24))/(exp(-x*23)+exp(-x*24))+
(-10*exp(-x*10)+11*exp(-x*11))/(exp(-x*10)+exp(-x*11))+
(-24*exp(-x*24)+25*exp(-x*25))/(exp(-x*24)+exp(-x*25))+
(-2*exp(-x*2)+3*exp(-x*3))/(exp(-x*2)+exp(-x*3))+
(-16*exp(-x*16)+17*exp(-x*17))/(exp(-x*16)+exp(-x*17))
}
#em
emfun14 <-function(max.it,eps){
lambda0<-0.1
i<-1
theta1<-1
theta2<-0.1
xx<-fun(lambda0)
while(abs(theta1-theta2)>=eps){
theta1<-theta2
theta2<-10/(10/theta1-xx)
xx<-fun(theta2)
if (i == max.it) break
i<-i+1
}
return(theta2)
}
#Implement a Gibbs sampler to generate a bivariate normal chain
#with zero means, unit standard deviations, and correlation 0.9
gibl5<-function(N){
rho=0.9
mu1=mu2=0
sigma1=sigma2=1
X <- matrix(0, N, 2)
X[1, ] <- c(0, 0)
s1 <- sqrt(1 - rho^2)* sigma1
s2 <- sqrt(1 - rho^2)* sigma2
for (i in 2:N) {
x2<-X[i-1,2]
m1<-mu1+rho*(x2-mu2) * sigma1/sigma2
X[i, 1] <- rnorm(1, m1,s1)
x1 <- X[i, 1]
m2<-mu2+rho*(x1-mu1) * sigma2/sigma1
X[i, 2]<-rnorm(1, m2,s2)
}
return(X)
}
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build(vignettes=FALSE)
install.packages('/Users/liuchunxi/Rpackage/StatComp22013_1.0.tar.gz',repo=NULL)
q()
devtools::build(vignettes=FALSE)
install.packages('/Users/liuchunxi/Rpackage/StatComp22013_1.0.tar.gz',repo=NULL)
getwd()
devtools::build(vignettes=FALSE)
install.packages('/Users/liuchunxi/Rpackage/StatComp22013_1.0.tar.gz',repo=NULL)
devtools::build(vignettes=FALSE)
install.packages('/Users/liuchunxi/Rpackage/StatComp22013_1.0.tar.gz',repo=NULL)
q()
devtool check
devtools::build(vignettes=FALSE)
install.packages('/Users/liuchunxi/Rpackage/StatComp22013_1.0.tar.gz',repo=NULL)
q()
devtools::build(vignettes=FALSE)
install.packages('/Users/liuchunxi/Rpackage/StatComp22013_1.0.tar.gz',repo=NULL)
q()
devtools::build(vignettes=FALSE)
install.packages('/Users/liuchunxi/Rpackage/StatComp22013_1.0.tar.gz',repo=NULL)
q()
doc
Meta
.Rproj.user
src/*.o
src/*.so
src/*.dll
.DS_Store # macOS Files
getwd()
install.packages('/Users/liuchunxi/Rpackage/StatComp22064_1.0.tar.gz',repo=NULL)
getwd()
knitr::opts_chunk$set(echo = TRUE)
b <- 100
y1 <- rw1$x[(b + 1):N]
b <- 100
y1 <- rw1$x[(b + 1):N]
library(Rcpp)
#// This is the rw_MetropolisC.cpp
#include <Rcpp.h>
#using namespace Rcpp;
#// [[Rcpp::export]]
cppFunction('NumericMatrix gibbsC(int N, double mu1, double mu2, double sigma1, double sigma2, double pho) {
NumericMatrix mat(N, 2);
double s1 = sqrt(1-pho * pho) * sigma1, s2 = sqrt(1-pho * pho) * sigma2;
double x = 0, y = 0;
for(int i = 0; i < N; i++) {
double m1 = mu1 + pho * (y - mu2) * sigma1 / sigma2;
x = rnorm(1, m1, s1)[0];
mat(i, 0) = x;
double m2 = mu2 + pho * (x - mu1) * sigma2 / sigma1;
y = rnorm(1, m2, s2)[0];
mat(i, 1) = y;
}
return(mat);
}')
devtools::install_github("LiuChxi\StatComp22013")
devtools::install_github("LiuChxi/StatComp22013")
q()
devtools::install_github("LiuChxi/StatComp22013")
bmygibbsC(1000,0.7,0,0,1,1)
dataset<-iris[,1:2]
bmykmeans(dataset,3)
library(StatComp22013)
bmykmeans(dataset,3)
bmygibbsC(1000,0.7,0,0,1,1)
bmymixnorsam(1,1000,0.2,0,1,5,1,4,1,10000,0.2)
bmygibbsC(1000,0.7,0,0,1,1)
sourceCpp(bmygibbsC.Cpp)
library(StatComp22064)
data(data)
distance <- shortestC(M)
distance <- shortestC(M)
q()
q()
q()
q()
